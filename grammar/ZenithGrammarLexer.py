# Generated from ZenithGrammar.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,327,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,5,28,216,8,28,10,28,
        12,28,219,9,28,1,28,3,28,222,8,28,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,3,29,233,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
        1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,
        1,42,5,42,269,8,42,10,42,12,42,272,9,42,1,43,1,43,4,43,276,8,43,
        11,43,12,43,277,1,43,1,43,3,43,282,8,43,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,3,44,292,8,44,1,45,1,45,1,46,4,46,297,8,46,11,46,
        12,46,298,1,46,1,46,1,47,1,47,1,47,1,48,1,48,5,48,308,8,48,10,48,
        12,48,311,9,48,1,48,1,48,1,48,1,48,5,48,317,8,48,10,48,12,48,320,
        9,48,1,48,1,48,3,48,324,8,48,1,48,1,48,1,318,0,49,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,1,0,6,1,0,49,57,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,337,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,3,105,1,0,0,
        0,5,109,1,0,0,0,7,111,1,0,0,0,9,113,1,0,0,0,11,117,1,0,0,0,13,125,
        1,0,0,0,15,132,1,0,0,0,17,138,1,0,0,0,19,145,1,0,0,0,21,148,1,0,
        0,0,23,150,1,0,0,0,25,152,1,0,0,0,27,155,1,0,0,0,29,162,1,0,0,0,
        31,167,1,0,0,0,33,173,1,0,0,0,35,177,1,0,0,0,37,180,1,0,0,0,39,186,
        1,0,0,0,41,189,1,0,0,0,43,191,1,0,0,0,45,194,1,0,0,0,47,197,1,0,
        0,0,49,199,1,0,0,0,51,201,1,0,0,0,53,207,1,0,0,0,55,209,1,0,0,0,
        57,221,1,0,0,0,59,232,1,0,0,0,61,234,1,0,0,0,63,236,1,0,0,0,65,238,
        1,0,0,0,67,240,1,0,0,0,69,242,1,0,0,0,71,246,1,0,0,0,73,249,1,0,
        0,0,75,251,1,0,0,0,77,253,1,0,0,0,79,256,1,0,0,0,81,259,1,0,0,0,
        83,263,1,0,0,0,85,266,1,0,0,0,87,281,1,0,0,0,89,291,1,0,0,0,91,293,
        1,0,0,0,93,296,1,0,0,0,95,302,1,0,0,0,97,323,1,0,0,0,99,100,5,115,
        0,0,100,101,5,116,0,0,101,102,5,97,0,0,102,103,5,114,0,0,103,104,
        5,116,0,0,104,2,1,0,0,0,105,106,5,101,0,0,106,107,5,110,0,0,107,
        108,5,100,0,0,108,4,1,0,0,0,109,110,5,123,0,0,110,6,1,0,0,0,111,
        112,5,125,0,0,112,8,1,0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,
        115,116,5,116,0,0,116,10,1,0,0,0,117,118,5,98,0,0,118,119,5,111,
        0,0,119,120,5,111,0,0,120,121,5,108,0,0,121,122,5,101,0,0,122,123,
        5,97,0,0,123,124,5,110,0,0,124,12,1,0,0,0,125,126,5,115,0,0,126,
        127,5,116,0,0,127,128,5,114,0,0,128,129,5,105,0,0,129,130,5,110,
        0,0,130,131,5,103,0,0,131,14,1,0,0,0,132,133,5,102,0,0,133,134,5,
        108,0,0,134,135,5,111,0,0,135,136,5,97,0,0,136,137,5,116,0,0,137,
        16,1,0,0,0,138,139,5,100,0,0,139,140,5,111,0,0,140,141,5,117,0,0,
        141,142,5,98,0,0,142,143,5,108,0,0,143,144,5,101,0,0,144,18,1,0,
        0,0,145,146,5,123,0,0,146,147,5,125,0,0,147,20,1,0,0,0,148,149,5,
        40,0,0,149,22,1,0,0,0,150,151,5,41,0,0,151,24,1,0,0,0,152,153,5,
        105,0,0,153,154,5,102,0,0,154,26,1,0,0,0,155,156,5,101,0,0,156,157,
        5,108,0,0,157,158,5,115,0,0,158,159,5,101,0,0,159,160,5,73,0,0,160,
        161,5,102,0,0,161,28,1,0,0,0,162,163,5,101,0,0,163,164,5,108,0,0,
        164,165,5,115,0,0,165,166,5,101,0,0,166,30,1,0,0,0,167,168,5,119,
        0,0,168,169,5,104,0,0,169,170,5,105,0,0,170,171,5,108,0,0,171,172,
        5,101,0,0,172,32,1,0,0,0,173,174,5,102,0,0,174,175,5,111,0,0,175,
        176,5,114,0,0,176,34,1,0,0,0,177,178,5,105,0,0,178,179,5,110,0,0,
        179,36,1,0,0,0,180,181,5,114,0,0,181,182,5,97,0,0,182,183,5,110,
        0,0,183,184,5,103,0,0,184,185,5,101,0,0,185,38,1,0,0,0,186,187,5,
        46,0,0,187,188,5,46,0,0,188,40,1,0,0,0,189,190,5,59,0,0,190,42,1,
        0,0,0,191,192,5,45,0,0,192,193,5,45,0,0,193,44,1,0,0,0,194,195,5,
        43,0,0,195,196,5,43,0,0,196,46,1,0,0,0,197,198,5,63,0,0,198,48,1,
        0,0,0,199,200,5,58,0,0,200,50,1,0,0,0,201,202,5,112,0,0,202,203,
        5,114,0,0,203,204,5,105,0,0,204,205,5,110,0,0,205,206,5,116,0,0,
        206,52,1,0,0,0,207,208,5,44,0,0,208,54,1,0,0,0,209,210,5,110,0,0,
        210,211,5,117,0,0,211,212,5,109,0,0,212,56,1,0,0,0,213,217,7,0,0,
        0,214,216,7,1,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,
        0,217,218,1,0,0,0,218,222,1,0,0,0,219,217,1,0,0,0,220,222,5,48,0,
        0,221,213,1,0,0,0,221,220,1,0,0,0,222,58,1,0,0,0,223,224,5,116,0,
        0,224,225,5,114,0,0,225,226,5,117,0,0,226,233,5,101,0,0,227,228,
        5,102,0,0,228,229,5,97,0,0,229,230,5,108,0,0,230,231,5,115,0,0,231,
        233,5,101,0,0,232,223,1,0,0,0,232,227,1,0,0,0,233,60,1,0,0,0,234,
        235,5,43,0,0,235,62,1,0,0,0,236,237,5,45,0,0,237,64,1,0,0,0,238,
        239,5,42,0,0,239,66,1,0,0,0,240,241,5,47,0,0,241,68,1,0,0,0,242,
        243,5,97,0,0,243,244,5,110,0,0,244,245,5,100,0,0,245,70,1,0,0,0,
        246,247,5,111,0,0,247,248,5,114,0,0,248,72,1,0,0,0,249,250,5,60,
        0,0,250,74,1,0,0,0,251,252,5,62,0,0,252,76,1,0,0,0,253,254,5,60,
        0,0,254,255,5,61,0,0,255,78,1,0,0,0,256,257,5,62,0,0,257,258,5,61,
        0,0,258,80,1,0,0,0,259,260,5,110,0,0,260,261,5,111,0,0,261,262,5,
        116,0,0,262,82,1,0,0,0,263,264,5,61,0,0,264,265,5,61,0,0,265,84,
        1,0,0,0,266,270,7,2,0,0,267,269,7,3,0,0,268,267,1,0,0,0,269,272,
        1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,86,1,0,0,0,272,270,1,
        0,0,0,273,275,5,34,0,0,274,276,7,3,0,0,275,274,1,0,0,0,276,277,1,
        0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,282,5,
        34,0,0,280,282,3,95,47,0,281,273,1,0,0,0,281,280,1,0,0,0,282,88,
        1,0,0,0,283,284,3,57,28,0,284,285,5,46,0,0,285,286,3,57,28,0,286,
        292,1,0,0,0,287,288,3,57,28,0,288,289,5,46,0,0,289,290,5,48,0,0,
        290,292,1,0,0,0,291,283,1,0,0,0,291,287,1,0,0,0,292,90,1,0,0,0,293,
        294,5,61,0,0,294,92,1,0,0,0,295,297,7,4,0,0,296,295,1,0,0,0,297,
        298,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,
        301,6,46,0,0,301,94,1,0,0,0,302,303,5,34,0,0,303,304,5,34,0,0,304,
        96,1,0,0,0,305,309,5,35,0,0,306,308,8,5,0,0,307,306,1,0,0,0,308,
        311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,324,1,0,0,0,311,
        309,1,0,0,0,312,313,5,47,0,0,313,314,5,35,0,0,314,318,1,0,0,0,315,
        317,9,0,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,319,1,0,0,0,318,
        316,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,322,5,35,0,0,322,
        324,5,47,0,0,323,305,1,0,0,0,323,312,1,0,0,0,324,325,1,0,0,0,325,
        326,6,48,0,0,326,98,1,0,0,0,12,0,217,221,232,270,277,281,291,298,
        309,318,323,1,6,0,0
    ]

class ZenithGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    DIGITS = 29
    BOOLEAN = 30
    ADD = 31
    SUB = 32
    MUL = 33
    DIV = 34
    AND = 35
    OR = 36
    LESS_THAN = 37
    GREATER_THAN = 38
    LESS_THAN_OR_EQUL = 39
    MORE_THAN_OR_EQUL = 40
    NOT_EQUL_TO = 41
    IS_EQUL_TO = 42
    VARIABLE_IDENTIFIER = 43
    VALID_STRING = 44
    DECIMAL_VALUE = 45
    ASSIGNMENT_OPERATOR = 46
    WHITE_SPACES = 47
    EMPTY_STRING = 48
    Comment = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'start'", "'end'", "'{'", "'}'", "'int'", "'boolean'", "'string'", 
            "'float'", "'double'", "'{}'", "'('", "')'", "'if'", "'elseIf'", 
            "'else'", "'while'", "'for'", "'in'", "'range'", "'..'", "';'", 
            "'--'", "'++'", "'?'", "':'", "'print'", "','", "'num'", "'+'", 
            "'-'", "'*'", "'/'", "'and'", "'or'", "'<'", "'>'", "'<='", 
            "'>='", "'not'", "'=='", "'='", "'\"\"'" ]

    symbolicNames = [ "<INVALID>",
            "DIGITS", "BOOLEAN", "ADD", "SUB", "MUL", "DIV", "AND", "OR", 
            "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUL", "MORE_THAN_OR_EQUL", 
            "NOT_EQUL_TO", "IS_EQUL_TO", "VARIABLE_IDENTIFIER", "VALID_STRING", 
            "DECIMAL_VALUE", "ASSIGNMENT_OPERATOR", "WHITE_SPACES", "EMPTY_STRING", 
            "Comment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "DIGITS", "BOOLEAN", "ADD", "SUB", "MUL", 
                  "DIV", "AND", "OR", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUL", 
                  "MORE_THAN_OR_EQUL", "NOT_EQUL_TO", "IS_EQUL_TO", "VARIABLE_IDENTIFIER", 
                  "VALID_STRING", "DECIMAL_VALUE", "ASSIGNMENT_OPERATOR", 
                  "WHITE_SPACES", "EMPTY_STRING", "Comment" ]

    grammarFileName = "ZenithGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


