# Generated from ZenithGrammar.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,332,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,
        1,29,5,29,221,8,29,10,29,12,29,224,9,29,1,29,3,29,227,8,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,238,8,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,
        1,41,1,42,1,42,1,42,1,43,1,43,5,43,274,8,43,10,43,12,43,277,9,43,
        1,44,1,44,4,44,281,8,44,11,44,12,44,282,1,44,1,44,3,44,287,8,44,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,297,8,45,1,46,1,46,
        1,47,4,47,302,8,47,11,47,12,47,303,1,47,1,47,1,48,1,48,1,48,1,49,
        1,49,5,49,313,8,49,10,49,12,49,316,9,49,1,49,1,49,1,49,1,49,5,49,
        322,8,49,10,49,12,49,325,9,49,1,49,1,49,3,49,329,8,49,1,49,1,49,
        1,323,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,1,0,6,1,0,49,57,1,0,48,57,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,
        2,0,10,10,13,13,342,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
        0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,107,1,0,0,0,5,111,1,0,0,0,7,113,
        1,0,0,0,9,115,1,0,0,0,11,119,1,0,0,0,13,127,1,0,0,0,15,134,1,0,0,
        0,17,140,1,0,0,0,19,147,1,0,0,0,21,150,1,0,0,0,23,152,1,0,0,0,25,
        154,1,0,0,0,27,157,1,0,0,0,29,164,1,0,0,0,31,169,1,0,0,0,33,175,
        1,0,0,0,35,179,1,0,0,0,37,182,1,0,0,0,39,188,1,0,0,0,41,191,1,0,
        0,0,43,194,1,0,0,0,45,196,1,0,0,0,47,199,1,0,0,0,49,202,1,0,0,0,
        51,204,1,0,0,0,53,206,1,0,0,0,55,212,1,0,0,0,57,214,1,0,0,0,59,226,
        1,0,0,0,61,237,1,0,0,0,63,239,1,0,0,0,65,241,1,0,0,0,67,243,1,0,
        0,0,69,245,1,0,0,0,71,247,1,0,0,0,73,251,1,0,0,0,75,254,1,0,0,0,
        77,256,1,0,0,0,79,258,1,0,0,0,81,261,1,0,0,0,83,264,1,0,0,0,85,268,
        1,0,0,0,87,271,1,0,0,0,89,286,1,0,0,0,91,296,1,0,0,0,93,298,1,0,
        0,0,95,301,1,0,0,0,97,307,1,0,0,0,99,328,1,0,0,0,101,102,5,115,0,
        0,102,103,5,116,0,0,103,104,5,97,0,0,104,105,5,114,0,0,105,106,5,
        116,0,0,106,2,1,0,0,0,107,108,5,101,0,0,108,109,5,110,0,0,109,110,
        5,100,0,0,110,4,1,0,0,0,111,112,5,123,0,0,112,6,1,0,0,0,113,114,
        5,125,0,0,114,8,1,0,0,0,115,116,5,105,0,0,116,117,5,110,0,0,117,
        118,5,116,0,0,118,10,1,0,0,0,119,120,5,98,0,0,120,121,5,111,0,0,
        121,122,5,111,0,0,122,123,5,108,0,0,123,124,5,101,0,0,124,125,5,
        97,0,0,125,126,5,110,0,0,126,12,1,0,0,0,127,128,5,115,0,0,128,129,
        5,116,0,0,129,130,5,114,0,0,130,131,5,105,0,0,131,132,5,110,0,0,
        132,133,5,103,0,0,133,14,1,0,0,0,134,135,5,102,0,0,135,136,5,108,
        0,0,136,137,5,111,0,0,137,138,5,97,0,0,138,139,5,116,0,0,139,16,
        1,0,0,0,140,141,5,100,0,0,141,142,5,111,0,0,142,143,5,117,0,0,143,
        144,5,98,0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,18,1,0,0,0,
        147,148,5,123,0,0,148,149,5,125,0,0,149,20,1,0,0,0,150,151,5,40,
        0,0,151,22,1,0,0,0,152,153,5,41,0,0,153,24,1,0,0,0,154,155,5,105,
        0,0,155,156,5,102,0,0,156,26,1,0,0,0,157,158,5,101,0,0,158,159,5,
        108,0,0,159,160,5,115,0,0,160,161,5,101,0,0,161,162,5,73,0,0,162,
        163,5,102,0,0,163,28,1,0,0,0,164,165,5,101,0,0,165,166,5,108,0,0,
        166,167,5,115,0,0,167,168,5,101,0,0,168,30,1,0,0,0,169,170,5,119,
        0,0,170,171,5,104,0,0,171,172,5,105,0,0,172,173,5,108,0,0,173,174,
        5,101,0,0,174,32,1,0,0,0,175,176,5,102,0,0,176,177,5,111,0,0,177,
        178,5,114,0,0,178,34,1,0,0,0,179,180,5,105,0,0,180,181,5,110,0,0,
        181,36,1,0,0,0,182,183,5,114,0,0,183,184,5,97,0,0,184,185,5,110,
        0,0,185,186,5,103,0,0,186,187,5,101,0,0,187,38,1,0,0,0,188,189,5,
        46,0,0,189,190,5,46,0,0,190,40,1,0,0,0,191,192,5,36,0,0,192,193,
        5,61,0,0,193,42,1,0,0,0,194,195,5,59,0,0,195,44,1,0,0,0,196,197,
        5,45,0,0,197,198,5,45,0,0,198,46,1,0,0,0,199,200,5,43,0,0,200,201,
        5,43,0,0,201,48,1,0,0,0,202,203,5,63,0,0,203,50,1,0,0,0,204,205,
        5,58,0,0,205,52,1,0,0,0,206,207,5,112,0,0,207,208,5,114,0,0,208,
        209,5,105,0,0,209,210,5,110,0,0,210,211,5,116,0,0,211,54,1,0,0,0,
        212,213,5,44,0,0,213,56,1,0,0,0,214,215,5,110,0,0,215,216,5,117,
        0,0,216,217,5,109,0,0,217,58,1,0,0,0,218,222,7,0,0,0,219,221,7,1,
        0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,
        0,0,223,227,1,0,0,0,224,222,1,0,0,0,225,227,5,48,0,0,226,218,1,0,
        0,0,226,225,1,0,0,0,227,60,1,0,0,0,228,229,5,116,0,0,229,230,5,114,
        0,0,230,231,5,117,0,0,231,238,5,101,0,0,232,233,5,102,0,0,233,234,
        5,97,0,0,234,235,5,108,0,0,235,236,5,115,0,0,236,238,5,101,0,0,237,
        228,1,0,0,0,237,232,1,0,0,0,238,62,1,0,0,0,239,240,5,43,0,0,240,
        64,1,0,0,0,241,242,5,45,0,0,242,66,1,0,0,0,243,244,5,42,0,0,244,
        68,1,0,0,0,245,246,5,47,0,0,246,70,1,0,0,0,247,248,5,97,0,0,248,
        249,5,110,0,0,249,250,5,100,0,0,250,72,1,0,0,0,251,252,5,111,0,0,
        252,253,5,114,0,0,253,74,1,0,0,0,254,255,5,60,0,0,255,76,1,0,0,0,
        256,257,5,62,0,0,257,78,1,0,0,0,258,259,5,60,0,0,259,260,5,61,0,
        0,260,80,1,0,0,0,261,262,5,62,0,0,262,263,5,61,0,0,263,82,1,0,0,
        0,264,265,5,110,0,0,265,266,5,111,0,0,266,267,5,116,0,0,267,84,1,
        0,0,0,268,269,5,61,0,0,269,270,5,61,0,0,270,86,1,0,0,0,271,275,7,
        2,0,0,272,274,7,3,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,
        0,0,0,275,276,1,0,0,0,276,88,1,0,0,0,277,275,1,0,0,0,278,280,5,34,
        0,0,279,281,7,3,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,
        0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,287,5,34,0,0,285,287,3,97,
        48,0,286,278,1,0,0,0,286,285,1,0,0,0,287,90,1,0,0,0,288,289,3,59,
        29,0,289,290,5,46,0,0,290,291,3,59,29,0,291,297,1,0,0,0,292,293,
        3,59,29,0,293,294,5,46,0,0,294,295,5,48,0,0,295,297,1,0,0,0,296,
        288,1,0,0,0,296,292,1,0,0,0,297,92,1,0,0,0,298,299,5,61,0,0,299,
        94,1,0,0,0,300,302,7,4,0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,
        1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,6,47,0,0,306,96,
        1,0,0,0,307,308,5,34,0,0,308,309,5,34,0,0,309,98,1,0,0,0,310,314,
        5,35,0,0,311,313,8,5,0,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,
        1,0,0,0,314,315,1,0,0,0,315,329,1,0,0,0,316,314,1,0,0,0,317,318,
        5,47,0,0,318,319,5,35,0,0,319,323,1,0,0,0,320,322,9,0,0,0,321,320,
        1,0,0,0,322,325,1,0,0,0,323,324,1,0,0,0,323,321,1,0,0,0,324,326,
        1,0,0,0,325,323,1,0,0,0,326,327,5,35,0,0,327,329,5,47,0,0,328,310,
        1,0,0,0,328,317,1,0,0,0,329,330,1,0,0,0,330,331,6,49,0,0,331,100,
        1,0,0,0,12,0,222,226,237,275,282,286,296,303,314,323,328,1,6,0,0
    ]

class ZenithGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    DIGITS = 30
    BOOLEAN = 31
    ADD = 32
    SUB = 33
    MUL = 34
    DIV = 35
    AND = 36
    OR = 37
    LESS_THAN = 38
    GREATER_THAN = 39
    LESS_THAN_OR_EQUL = 40
    MORE_THAN_OR_EQUL = 41
    NOT_EQUL_TO = 42
    IS_EQUL_TO = 43
    VARIABLE_IDENTIFIER = 44
    VALID_STRING = 45
    DECIMAL_VALUE = 46
    ASSIGNMENT_OPERATOR = 47
    WHITE_SPACES = 48
    EMPTY_STRING = 49
    Comment = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'start'", "'end'", "'{'", "'}'", "'int'", "'boolean'", "'string'", 
            "'float'", "'double'", "'{}'", "'('", "')'", "'if'", "'elseIf'", 
            "'else'", "'while'", "'for'", "'in'", "'range'", "'..'", "'$='", 
            "';'", "'--'", "'++'", "'?'", "':'", "'print'", "','", "'num'", 
            "'+'", "'-'", "'*'", "'/'", "'and'", "'or'", "'<'", "'>'", "'<='", 
            "'>='", "'not'", "'=='", "'='", "'\"\"'" ]

    symbolicNames = [ "<INVALID>",
            "DIGITS", "BOOLEAN", "ADD", "SUB", "MUL", "DIV", "AND", "OR", 
            "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUL", "MORE_THAN_OR_EQUL", 
            "NOT_EQUL_TO", "IS_EQUL_TO", "VARIABLE_IDENTIFIER", "VALID_STRING", 
            "DECIMAL_VALUE", "ASSIGNMENT_OPERATOR", "WHITE_SPACES", "EMPTY_STRING", 
            "Comment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "DIGITS", "BOOLEAN", "ADD", 
                  "SUB", "MUL", "DIV", "AND", "OR", "LESS_THAN", "GREATER_THAN", 
                  "LESS_THAN_OR_EQUL", "MORE_THAN_OR_EQUL", "NOT_EQUL_TO", 
                  "IS_EQUL_TO", "VARIABLE_IDENTIFIER", "VALID_STRING", "DECIMAL_VALUE", 
                  "ASSIGNMENT_OPERATOR", "WHITE_SPACES", "EMPTY_STRING", 
                  "Comment" ]

    grammarFileName = "ZenithGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


